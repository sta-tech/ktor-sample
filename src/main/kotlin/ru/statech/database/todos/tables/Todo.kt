/*
 * This file is generated by jOOQ.
 */
package ru.statech.database.todos.tables


import java.time.OffsetDateTime
import java.util.UUID
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import ru.statech.database.todos.Todos
import ru.statech.database.todos.keys.PK_TODO
import ru.statech.database.todos.tables.records.TodoRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Todo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TodoRecord>?,
    aliased: Table<TodoRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TodoRecord>(
    alias,
    Todos.TODOS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>TODOS.TODO</code>
         */
        val TODO: Todo = Todo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TodoRecord> = TodoRecord::class.java

    /**
     * The column <code>TODOS.TODO.ID</code>.
     */
    val ID: TableField<TodoRecord, UUID?> = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>TODOS.TODO.TITLE</code>.
     */
    val TITLE: TableField<TodoRecord, String?> = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(1024).nullable(false), this, "")

    /**
     * The column <code>TODOS.TODO.OWNER</code>.
     */
    val OWNER: TableField<TodoRecord, String?> = createField(DSL.name("OWNER"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>TODOS.TODO.DUE_DATE</code>.
     */
    val DUE_DATE: TableField<TodoRecord, OffsetDateTime?> = createField(DSL.name("DUE_DATE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>TODOS.TODO.DONE</code>.
     */
    val DONE: TableField<TodoRecord, Boolean?> = createField(DSL.name("DONE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "")

    private constructor(alias: Name, aliased: Table<TodoRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TodoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>TODOS.TODO</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>TODOS.TODO</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>TODOS.TODO</code> table reference
     */
    constructor(): this(DSL.name("TODO"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TodoRecord>): this(Internal.createPathAlias(child, key), child, key, TODO, null)
    override fun getSchema(): Schema? = if (aliased()) null else Todos.TODOS
    override fun getPrimaryKey(): UniqueKey<TodoRecord> = PK_TODO
    override fun `as`(alias: String): Todo = Todo(DSL.name(alias), this)
    override fun `as`(alias: Name): Todo = Todo(alias, this)
    override fun `as`(alias: Table<*>): Todo = Todo(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Todo = Todo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Todo = Todo(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Todo = Todo(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<UUID?, String?, String?, OffsetDateTime?, Boolean?> = super.fieldsRow() as Row5<UUID?, String?, String?, OffsetDateTime?, Boolean?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, String?, String?, OffsetDateTime?, Boolean?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, String?, String?, OffsetDateTime?, Boolean?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
